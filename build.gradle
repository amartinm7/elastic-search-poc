plugins {
	id 'application'
	id 'idea'
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.61'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.61'
	id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC9.2'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.61'
}

// apply from: './gradle/build-git.gradle'
// apply from: './gradle/build-integration-test.gradle'
apply plugin: 'kotlin-jpa'


group = 'com.amm.elastic.poc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '10'
mainClassName = 'com.amm.elastic.poc.infrastructure.framework.Application'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-data-elasticsearch")
	implementation("org.springframework.boot:spring-boot-starter-mustache")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	// Swagger Api docs
	implementation("io.springfox:springfox-swagger2:2.7.0")
	implementation("io.springfox:springfox-swagger-ui:2.7.0")
	//
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.security:spring-security-test"){
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

compileKotlin {
	kotlinOptions.jvmTarget = "10"
}

compileTestKotlin {
	kotlinOptions.jvmTarget = "10"
}

/*compileIntegrationTestKotlin {
	kotlinOptions.jvmTarget = "10"
}*/

/*jacocoTestReport.onlyIf {
	file("$rootProject.buildDir/jacoco/integrationTest.exec").exists()
}
jacocoTestReport {
	executionData tasks.withType(Test)
}*/
subprojects {
	// This makes Quality Gate work fine with multimodule projects
	shipReports {
		enabled = false
	}
}

//check.dependsOn(ktlint)